package com.coursemanagement.Admin;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.coursemanagement.Repository.Repository;
import com.coursemanagement.dto.CourseInfo;
import com.coursemanagement.dto.TrainerCredentials;
import com.coursemanagement.dto.TrainerInfo;

public class AdminModel {

	private AdminView adminView;

	public AdminModel(AdminView adminView) {
		this.adminView = adminView;

	}

	private String adminId;

	public String getAdminId() {
		return adminId;
	}

	public void setAdminId(String adminId) {
		this.adminId = adminId;
	}

//==================Adding new Admin======================================

	public void addAdmin(String name, String password, String rePassword) {
		boolean flag = false;
		String addedId = "";
		if (password.equals(rePassword)) {
			addedId = Repository.getInstance().addAmin(name, password);
			if (addedId.length() > 0)
				flag = true;
		}
		if (flag) {
			adminView.message("Admin Added succesfully ---> user name is---> " + addedId);
		}
	}

//=======================check to continue or not==============================

	public void continueCheck(String option) {
		if (option.equals("y") || option.equals("Y") || option.equals("yes") || option.equals("YES")) {
			adminView.adminIndex((String) getAdminId());
		} else {
			adminView.exitMethod("Thank you for visition");
		}
	}

//=======================================Validating trainer information and adding to the data===================

	public void addTrainer(String traineName, String dob, String experience, String phoneNo, String emailId,
			String subject) {
		traineName = traineName.toLowerCase();
		if (!traineName.matches("[a-z]+")) {
			adminView.errorMessage("invalid Name");
		} else if (!dob.matches("^[0-9]{2}[/?][0-9]{2}[/?][0-9]{4}$")) {
			adminView.errorMessage("Invalid Date of Birth");
		} else if (!experience.matches("[0-9]+")) {
			adminView.errorMessage("Invalid Experince");
		} else if (!phoneNo.matches("[9876]{1}[0-9]+")) {
			adminView.errorMessage("Invalid Phone Number");
		} else if (!emailId.matches("^[a-z0-9]+[@?][gmail]+[.?][com]+")) {
			adminView.errorMessage("Invalid Email Id");
		} else if (!subject.matches("[a-zA-Z,]+")) {
			adminView.errorMessage("Invalid subjects");
		} else {
			String[] subjects = subject.split(",");
			ArrayList<String> subjectList = new ArrayList(Arrays.asList(subjects));
			String dateArr[] = dob.split("/");
			LocalDate date = LocalDate.of(Integer.parseInt(dateArr[2]), Integer.parseInt(dateArr[1]),
					Integer.parseInt(dateArr[0]));
			String trainerId = Repository.getInstance().addTrainee(traineName, date, experience, phoneNo, emailId,
					subjectList);
			viewAddedTraine(trainerId);
		}
	}

//=======================after adding shows the trainer id to the admin (Trainer id is autogenerated)===============

	public void viewAddedTraine(String trainerId) {
		adminView.message("Traine added Succesfully --- UserName: " + trainerId);
	}

//========================adding new courses=========================

	public void addCourse(String courseName, String courseInfo, String courseModule, String startDate, String endDate,
			String examDate, String traineeId) {
		courseName = courseName.toLowerCase();
		startDate = startDate.replace("/", "-");
		endDate = endDate.replace("/", "-");
		examDate = examDate.replace("/", "-");
		String[] module = courseModule.split(",");
		if (!courseName.matches("[a-z]+")) {
			adminView.errorMessage("Invalid Course name");
		} else if (!startDate.matches("[0-9]{4}[-?][0-9]{2}[-?][0-9]{2}")
				|| LocalDate.parse(startDate).isBefore(LocalDate.now())) {
			adminView.errorMessage("Invalid Start Date");
		} else if (!endDate.matches("[0-9]{4}[-?][0-9]{2}[-?][0-9]{2}")
				|| LocalDate.parse(endDate).isBefore(LocalDate.parse(startDate))) {
			adminView.errorMessage("Invalid End Date");
		} else if (!examDate.matches("[0-9]{4}[-?][0-9]{2}[-?][0-9]{2}")
				|| LocalDate.parse(examDate).isBefore(LocalDate.parse(endDate))) {
			adminView.errorMessage("Invalid ExamDate");
		} else {
			boolean flag = Repository.getInstance().addCourse(courseName, courseInfo,
					new ArrayList(Arrays.asList(module)), LocalDate.parse(startDate), LocalDate.parse(endDate),
					LocalDate.parse(examDate), traineeId);

			if (flag) {
				adminView.message("Course Added Succesfully");
				return;
			} else {
				adminView.message("Unable to Add course");
			}
		}
	}

//===============================getting course information=======================================

	public List<CourseInfo> getCourseInfo() {
		return Repository.getInstance().getCourseInfo();
	}

//===================================deleting course info========================

	public void deleteCourse(String courseId) {
		boolean deleteCourse = Repository.getInstance().deleteCourse(courseId);
		if (deleteCourse) {
			adminView.message("Deleted Succesfully");
		} else {
			adminView.errorMessage("No course Available with this id");
		}
	}

	public void showTrainers() {
		List<TrainerCredentials> trainerInfo = Repository.getInstance().getTrainerInfo();
		if (trainerInfo.size() == 0) {
			adminView.errorMessage("NO trainer registered");
		} else {
			adminView.showTrainerInfo(trainerInfo);
		}
	}

	public void viewTrainer() {
		List<TrainerCredentials> trainerInfo = Repository.getInstance().getTrainerInfo();
		if (trainerInfo.size() == 0) {
			adminView.errorMessage("NO trainer registered");
		} else {
			adminView.chooseTrainers(trainerInfo);
		}
	}

}
